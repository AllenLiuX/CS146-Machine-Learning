# -*- coding: utf-8 -*-
"""“Fall2020-CS146-HW1.ipynb”的副本

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14cRU2oDEDKSO6_nwA7TiqcmrW2J1RX73
"""

import sys

# To add your own Drive Run this cell.
# from google.colab import drive
# drive.mount('/content/drive')

# Please append your own directory after ‘/content/drive/My Drive/'
# where you have nutil.py and adult_subsample.csv
### ========== TODO : START ========== ###
# for example: sys.path += ['/content/drive/My Drive/Fall2020-CS146-HW1'] 
sys.path += ['/content/drive/My Drive/'] 
### ========== TODO : END ========== ###


from nutil import *

# Use only the provided packages!
import math
import csv

from collections import Counter

from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import cross_val_score
from sklearn import metrics
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import StratifiedShuffleSplit

######################################################################
# Immutatble classes
######################################################################

class Classifier(object) :
    """
    Classifier interface.
    """

    def fit(self, X, y):
        raise NotImplementedError()

    def predict(self, X):
        raise NotImplementedError()


class MajorityVoteClassifier(Classifier) :

    def __init__(self) :
        """
        A classifier that always predicts the majority class.

        Attributes
        --------------------
            prediction_ -- majority class
        """
        self.prediction_ = None

    def fit(self, X, y) :
        """
        Build a majority vote classifier from the training set (X, y).

        Parameters
        --------------------
            X    -- numpy array of shape (n,d), samples
            y    -- numpy array of shape (n,), target classes

        Returns
        --------------------
            self -- an instance of self
        """
        majority_val = Counter(y).most_common(1)[0][0] # (1) means return 1 most common value, [0]->first item [0.0 760]
        self.prediction_ = majority_val
        return self

    def predict(self, X) :
        """
        Predict class values.

        Parameters
        --------------------
            X    -- numpy array of shape (n,d), samples

        Returns
        --------------------
            y    -- numpy array of shape (n,), predicted classes
        """
        if self.prediction_ is None :
            raise Exception("Classifier not initialized. Perform a fit first.")

        n,d = X.shape
        y = [self.prediction_] * n
        return y

######################################################################
# Mutatble classes
######################################################################

class RandomClassifier(Classifier) :

    def __init__(self) :
        """
        A classifier that predicts according to the distribution of the classes.

        Attributes
        --------------------
            probabilities_ -- class distribution dict (key = class, val = probability of class)
        """
        self.probabilities_ = None

    def fit(self, X, y) :
        """
        Build a random classifier from the training set (X, y).

        Parameters
        --------------------
            X    -- numpy array of shape (n,d), samples
            y    -- numpy array of shape (n,), target classes

        Returns
        --------------------
            self -- an instance of self
        """

        ### ========== TODO : START ========== ###
        # part b: set self.probabilities_ according to the training set
        c = Counter(y)
        self.probabilities_ = c[1]/(c[0]+c[1])  # prob of predicting 1 -> cases of 1 divided by the total cases

        ### ========== TODO : END ========== ###

        return self

    def predict(self, X, seed=1234) :
        """
        Predict class values.

        Parameters
        --------------------
            X    -- numpy array of shape (n,d), samples
            seed -- integer, random seed

        Returns
        --------------------
            y    -- numpy array of shape (n,), predicted classes
        """
        if self.probabilities_ is None :
            raise Exception("Classifier not initialized. Perform a fit first.")
        np.random.seed(seed)

        ### ========== TODO : START ========== ###
        # part b: predict the class for each test example
        # hint: use np.random.choice (be careful of the parameters)
        y = np.random.choice(2, len(X), p=[1-self.probabilities_, self.probabilities_])
        # print(y)
        ### ========== TODO : END ========== ###

        return y

######################################################################
# Immutatble functions
######################################################################

def plot_histograms(X, y, Xnames, yname) :
    n,d = X.shape  # n = number of examples, d =  number of features
    fig = plt.figure(figsize=(20,15))
    ncol = 3
    nrow = d // ncol + 1
    for i in range(d) :
        fig.add_subplot (nrow,ncol,i+1)
        data, bins, align, labels = plot_histogram(X[:,i], y, Xname=Xnames[i], yname=yname, show = False)
        n, bins, patches = plt.hist(data, bins=bins, align=align, alpha=0.5, label=labels)
        plt.xlabel(Xnames[i])
        plt.ylabel('Frequency')
        plt.legend() #plt.legend(loc='upper left')

    plt.savefig ('histograms.pdf')


def plot_histogram(X, y, Xname, yname, show = True) :
    """
    Plots histogram of values in X grouped by y.

    Parameters
    --------------------
        X     -- numpy array of shape (n,d), feature values
        y     -- numpy array of shape (n,), target classes
        Xname -- string, name of feature
        yname -- string, name of target
    """

    # set up data for plotting
    targets = sorted(set(y))
    data = []; labels = []
    for target in targets :
        features = [X[i] for i in range(len(y)) if y[i] == target]
        data.append(features)
        labels.append('%s = %s' % (yname, target))

    # set up histogram bins
    features = set(X)
    nfeatures = len(features)
    test_range = list(range(int(math.floor(min(features))), int(math.ceil(max(features)))+1))
    if nfeatures < 10 and sorted(features) == test_range:
        bins = test_range + [test_range[-1] + 1] # add last bin
        align = 'left'
    else :
        bins = 10
        align = 'mid'

    # plot
    if show == True:
        plt.figure()
        n, bins, patches = plt.hist(data, bins=bins, align=align, alpha=0.5, label=labels)
        plt.xlabel(Xname)
        plt.ylabel('Frequency')
        plt.legend() #plt.legend(loc='upper left')
        plt.show()

    return data, bins, align, labels

######################################################################
# Mutatble functions
######################################################################

def error(clf, X, y, ntrials=100, test_size=0.2) :
    """
    Computes the classifier error over a random split of the data,
    averaged over ntrials runs.

    Parameters
    --------------------
        clf         -- classifier
        X           -- numpy array of shape (n,d), features values
        y           -- numpy array of shape (n,), target classes
        ntrials     -- integer, number of trials

    Returns
    --------------------
        train_error -- float, training error
        test_error  -- float, test error
        f1_score    -- float, test "micro" averaged f1 score
    """

    ### ========== TODO : START ========== ###
    # compute cross-validation error using StratifiedShuffleSplit over ntrials
    # hint: use train_test_split (be careful of the parameters)
    sss = StratifiedShuffleSplit(n_splits=ntrials, test_size=test_size, random_state=0)
    train_errors = []
    test_errors = []
    f1_scores = []      # return the averaged f1_score?
    for train_index, test_index in sss.split(X, y):
        # split the data into training set and testing set
        X_train, y_train = X[train_index], y[train_index]
        X_test, y_test = X[test_index], y[test_index]
        # fit and predict
        clf.fit(X_train, y_train)
        y_pred_train = clf.predict(X_train)
        y_pred_test = clf.predict(X_test)
        # calculate the error
        f1_score_train = metrics.f1_score(y_train, y_pred_train, average='micro')
        train_error = 1 - f1_score_train
        f1_score_test = metrics.f1_score(y_test, y_pred_test, average='micro')
        test_error = 1 - f1_score_test
        train_errors.append(train_error)
        test_errors.append(test_error)
        f1_scores += [f1_score_train, f1_score_test]
    # calculate the average error
    train_error = np.average(train_errors)
    test_error = np.average(test_errors)
    f1_score = np.average(f1_scores)

    ### ========== TODO : END ========== ###

    return train_error, test_error, f1_score

######################################################################
# Immutatble functions
######################################################################


def write_predictions(y_pred, filename, yname=None) :
    """Write out predictions to csv file."""
    out = open(filename, 'wb')
    f = csv.writer(out)
    if yname :
        f.writerow([yname])
    f.writerows(list(zip(y_pred)))
    out.close()

######################################################################
# main
######################################################################

def main():
    
    
    
    # load adult_subsample dataset with correct file path
    ### ========== TODO : START ========== ###
    # data_file =  "/content/drive/My Drive/Fall2020-CS146-HW1/adult_subsample.csv"
    data_file = 'adult_subsample.csv'
    ### ========== TODO : END ========== ###
    



    data = load_data(data_file, header=1, predict_col=-1)

    X = data.X; Xnames = data.Xnames
    y = data.y; yname = data.yname
    n,d = X.shape  # n = number of examples, d =  number of features


    plt.figure()
    #========================================
    # part a: plot histograms of each feature
    print('Plotting...')
    plot_histograms(X, y, Xnames=Xnames, yname=yname)
    




    ### ========== TODO : START ========== ###
    # part i: Preprocess X (e.g., normalize)
    scaler = StandardScaler()
    scaler.fit(X)
    scaler.transform(X)
    ### ========== TODO : END ========== ###




    #========================================
    # train Majority Vote classifier on data
    print('Classifying using Majority Vote...')
    clf = MajorityVoteClassifier() # create MajorityVote classifier, which includes all model parameters
    clf.fit(X, y)                  # fit training data using the classifier
    y_pred = clf.predict(X)        # take the classifier and run it on the training data
    train_error = 1 - metrics.accuracy_score(y, y_pred, normalize=True)
    print('\t-- training error: %.3f' % train_error)





    ### ========== TODO : START ========== ###
    # part b: evaluate training error of Random classifier
    print('Classifying using Random...')
    clf2 = RandomClassifier()
    clf2.fit(X, y)
    y_pred = clf2.predict(X)
    train_error = 1 - metrics.accuracy_score(y, y_pred, normalize=True)
    print('\t-- training error: %.3f' % train_error)

    ### ========== TODO : END ========== ###





    ### ========== TODO : START ========== ###
    # part c: evaluate training error of Decision Tree classifier
    print('Classifying using Decision Tree...')
    clf3 = DecisionTreeClassifier(criterion='entropy')
    clf3.fit(X, y)
    y_pred = clf3.predict(X)
    train_error = 1 - metrics.accuracy_score(y, y_pred, normalize=True)
    print('\t-- training error: %.3f' % train_error)

    ### ========== TODO : END ========== ###






    ### ========== TODO : START ========== ###
    # part d: evaluate training error of k-Nearest Neighbors classifier
    # use k = 3, 5, 7 for n_neighbors
    print('Classifying using k-Nearest Neighbors...')
    for neighbors in [3,5,7]:
        clf4 = KNeighborsClassifier(n_neighbors=neighbors)
        clf4.fit(X, y)
        y_pred = clf4.predict(X)
        train_error = 1 - metrics.accuracy_score(y, y_pred, normalize=True)
        print('\t-- training error for k=%d: %.3f' %(neighbors, train_error))

    ### ========== TODO : END ========== ###





    ### ========== TODO : START ========== ###
    # part e: use cross-validation to compute average training and test error of classifiers
    print('Investigating various classifiers...')

    print('\tresults for majority vote classifier: ')
    train_error, test_error, f1_score = error(clf, X, y)
    print('\t-- average training error: %.3f' % train_error)
    print('\t-- average testing error: %.3f' % test_error)
    print('\t-- average f1_score: %.3f' % f1_score)

    print('\tresults for random classifier: ')
    train_error, test_error, f1_score = error(clf2, X, y)
    print('\t-- average training error: %.3f' % train_error)
    print('\t-- average testing error: %.3f' % test_error)
    print('\t-- average f1_score: %.3f' % f1_score)

    print('\tresults for decision tree classifier: ')
    train_error, test_error, f1_score = error(clf3, X, y)
    print('\t-- average training error: %.3f' % train_error)
    print('\t-- average testing error: %.3f' % test_error)
    print('\t-- average f1_score: %.3f' % f1_score)

    print('\tresults for k-Nearest classifier: ')
    clf4 = KNeighborsClassifier(n_neighbors=5)
    train_error, test_error, f1_score = error(clf4, X, y)
    print('\t-- average training error: %.3f' % train_error)
    print('\t-- average testing error: %.3f' % test_error)
    print('\t-- average f1_score: %.3f' % f1_score)

    ### ========== TODO : END ========== ###


    ### ========== TODO : START ========== ###
    # part f: use 10-fold cross-validation to find the best value of k for k-Nearest Neighbors classifier
    print('Finding the best k...')
    k_vals = range(1, 50, 2)
    scores = []
    for k in k_vals:
        cur_clf = KNeighborsClassifier(n_neighbors=k)
        cur_scores = cross_val_score(cur_clf, X, y, cv=10)
        scores.append(np.average(cur_scores))
    # print(scores)
    # find k value at the position with max score
    best_k = k_vals[scores.index(max(scores))]
    print('\tThe best value of number neighbors: ', best_k)
    plt.figure()
    plt.plot(k_vals, scores)
    plt.xlabel('number of neighbors, k')
    plt.ylabel('cross val score')
    plt.title('figure of k-Nearest Neighbors performance vs neighbors num')
    # plt.show()
    plt.savefig('score vs neighbors.jpg')

    ### ========== TODO : END ========== ###





    ### ========== TODO : START ========== ###
    # part g: investigate decision tree classifier with various depths
    print('Investigating depths...')
    d_vals = range(1, 21)
    train_errs = []
    test_errs = []
    for d in d_vals:
        cur_clf = DecisionTreeClassifier(criterion='entropy', max_depth=d)
        train_err, test_err, f1_score = error(cur_clf, X, y, 10, 0.2)
        # cur_scores = cross_val_score(cur_clf, X, y, cv=10)
        # scores.append(np.average(cur_scores))
        train_errs.append(train_err)
        test_errs.append(test_err)
    # print(test_errs)
    # print(train_errs)
    # find d value at the position with min test error
    best_d = d_vals[test_errs.index(min(test_errs))]
    print('\tThe best value of max_depth: ', best_d)
    plt.figure()
    plt.plot(d_vals, train_errs, label='train error')
    plt.plot(d_vals, test_errs, label='test error')
    plt.xlabel('max depth, d')
    plt.ylabel('cross val score')
    plt.title('figure of decision tree performance vs max depth d')
    plt.legend()
    # plt.show()
    plt.savefig('score vs depth.jpg')

    ### ========== TODO : END ========== ###





    ### ========== TODO : START ========== ###
    # part h: investigate decision tree and k-Nearest Neighbors classifier with various training set sizes
    from sklearn.model_selection import train_test_split
    print('investigating with various training set sizes...')
    training_size = [i/10 for i in range(1, 11)]     # generate [0.1, 0.2, ...]
    decision_train_errs = []
    decision_test_errs = []
    neighbors_train_errs = []
    neighbors_test_errs = []
    for size in training_size:
        sss = StratifiedShuffleSplit(n_splits=10, test_size=0.1, random_state=0)
        train_errors = []
        test_errors = []
        X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0, test_size=0.1)
        X_train = X_train[:int(len(X_train) * size)]
        y_train = y_train[:int(len(y_train) * size)]
        # fit and predict
        clf_k = KNeighborsClassifier(n_neighbors=best_k)
        clf_k.fit(X_train, y_train)
        y_pred_train_k = clf_k.predict(X_train)
        y_pred_test_k = clf_k.predict(X_test)

        clf_d = DecisionTreeClassifier(criterion='entropy', max_depth=best_d)
        clf_d.fit(X_train, y_train)
        y_pred_train_d = clf_d.predict(X_train)
        y_pred_test_d = clf_d.predict(X_test)

        # calculate the error
        train_error = 1 - metrics.accuracy_score(y_train, y_pred_train_k, normalize=True)
        test_error = 1 - metrics.accuracy_score(y_test, y_pred_test_k, normalize=True)
        neighbors_train_errs.append(train_error)
        neighbors_test_errs.append(test_error)

        train_error = 1 - metrics.accuracy_score(y_train, y_pred_train_d, normalize=True)
        test_error = 1 - metrics.accuracy_score(y_test, y_pred_test_d, normalize=True)
        decision_train_errs.append(train_error)
        decision_test_errs.append(test_error)

    plt.figure()
    plt.plot(training_size, decision_train_errs, label='decision tree train error')
    plt.plot(training_size, decision_test_errs, label='decision tree test error')
    plt.plot(training_size, neighbors_train_errs, label='K-neighbor train error')
    plt.plot(training_size, neighbors_test_errs, label='K-neighbor test error')
    plt.xlabel('training size')
    plt.ylabel('error')
    plt.title('figure of classifiers performance vs training size')
    plt.legend()
    # plt.show()
    plt.savefig('error vs training size.jpg')

    ### ========== TODO : END ========== ###



    print('Done')


if __name__ == "__main__":
    main()